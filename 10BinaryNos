#include <iostream>
using namespace std;

// Define the node structure for the doubly linked list
struct Node {
    int data;   // Binary digit (0 or 1)
    Node* next; // Pointer to next node
    Node* prev; // Pointer to previous node

    Node(int val) : data(val), next(nullptr), prev(nullptr) {}
};

// Class for the doubly linked list
class BinaryNumber {
private:
    Node* head;
    Node* tail;

public:
    // Constructor
    BinaryNumber() : head(nullptr), tail(nullptr) {}

    // Function to insert a new node at the end of the list
    void insert(int val) {
        Node* newNode = new Node(val);
        if (!head) {
            head = tail = newNode;
        } else {
            tail->next = newNode;
            newNode->prev = tail;
            tail = newNode;
        }
    }

    // Function to display the binary number
    void display() {
        Node* temp = head;
        while (temp) {
            cout << temp->data;
            temp = temp->next;
        }
        cout << endl;
    }

    // Function to compute 1's complement
    void onesComplement() {
        Node* temp = head;
        while (temp) {
            temp->data = (temp->data == 0) ? 1 : 0; // Flip bits
            temp = temp->next;
        }
    }

    // Function to compute 2's complement
    void twosComplement() {
        onesComplement(); // Compute 1's complement first
        Node* temp = tail;
        bool carry = true;

        while (temp && carry) {
            if (temp->data == 0) {
                temp->data = 1;
                carry = false;
            } else {
                temp->data = 0;
            }
            temp = temp->prev;
        }
    }

    // Function to add another binary number
    BinaryNumber add(BinaryNumber& other) {
        BinaryNumber result;
        Node* temp1 = tail;
        Node* temp2 = other.tail;
        int carry = 0;

        while (temp1 || temp2 || carry) {
            int sum = carry;
            if (temp1) {
                sum += temp1->data;
                temp1 = temp1->prev;
            }
            if (temp2) {
                sum += temp2->data;
                temp2 = temp2->prev;
            }

            result.insert(sum % 2);
            carry = sum / 2;
        }
        return result;
    }
};

int main() {
    BinaryNumber num1, num2;

    // Insert binary digits for num1 (e.g., 1101)
    num1.insert(1);
    num1.insert(1);
    num1.insert(0);
    num1.insert(1);

    // Insert binary digits for num2 (e.g., 1011)
    num2.insert(1);
    num2.insert(0);
    num2.insert(1);
    num2.insert(1);

    cout << "Binary Number 1: ";
    num1.display();
    cout << "Binary Number 2: ";
    num2.display();

    // Compute and display 1's and 2's complement of num1
    num1.onesComplement();
    cout << "1's Complement of Binary Number 1: ";
    num1.display();

    num1.twosComplement();
    cout << "2's Complement of Binary Number 1: ";
    num1.display();

    // Adding the two binary numbers
    BinaryNumber result = num1.add(num2);
    cout << "Sum of Binary Numbers 1 and 2: ";
    result.display();

    return 0;
}
