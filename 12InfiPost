#include <iostream>
#include <stack>
#include <cctype>
using namespace std;

// Function to determine precedence of operators
int precedence(char op) {
    if (op == '+' || op == '-')
        return 1;
    if (op == '*' || op == '/')
        return 2;
    return 0;
}

// Function to perform arithmetic operations
int applyOperation(int a, int b, char op) {
    switch (op) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        case '/': return a / b;
    }
    return 0;
}

// Function to convert infix expression to postfix expression
string infixToPostfix(string infix) {
    stack<char> operators;
    string postfix;

    for (char ch : infix) {
        if (isalnum(ch)) {
            // If the character is an operand, add it to postfix
            postfix += ch;
        } else if (ch == '(') {
            // If the character is '(', push it to the stack
            operators.push(ch);
        } else if (ch == ')') {
            // If the character is ')', pop and append to postfix until '(' is found
            while (!operators.empty() && operators.top() != '(') {
                postfix += operators.top();
                operators.pop();
            }
            operators.pop(); // Remove '(' from stack
        } else {
            // Operator encountered
            while (!operators.empty() && precedence(operators.top()) >= precedence(ch)) {
                postfix += operators.top();
                operators.pop();
            }
            operators.push(ch);
        }
    }

    // Pop all the remaining operators from the stack
    while (!operators.empty()) {
        postfix += operators.top();
        operators.pop();
    }

    return postfix;
}

// Function to evaluate a postfix expression
int evaluatePostfix(string postfix) {
    stack<int> values;

    for (char ch : postfix) {
        if (isalnum(ch)) {
            // If the character is an operand, push its integer value to the stack
            values.push(ch - '0');
        } else {
            // Operator encountered
            int b = values.top(); values.pop();
            int a = values.top(); values.pop();
            int result = applyOperation(a, b, ch);
            values.push(result);
        }
    }

    return values.top();
}

// Main function
int main() {
    string infix;

    cout << "Enter infix expression: ";
    cin >> infix;

    string postfix = infixToPostfix(infix);
    cout << "\nPostfix Expression: " << postfix;

    int result = evaluatePostfix(postfix);
    cout << "\nEvaluation Result: " << result << endl;

    return 0;
}

